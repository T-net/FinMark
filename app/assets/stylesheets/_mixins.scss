// grid
@mixin grid($column) {
  width: grid-space($column);
}

@mixin offset($column) {
  margin-left: offset-space($column);
}

@function grid-space($column) {
  @return $column * (100 / $grid-columns) * 1%;
}

@function offset-space($column) {
  @return $column * (100 / $grid-columns) * 1%;
}

@mixin arrow($size, $border-width, $color, $direction) {
  display: inline-block;
  width: $size;
  height: $size;
  border: $border-width solid $color;
  content: '';

  @if($direction == 'up') {
    transform: rotate(45deg);
    border-right: 0;
    border-bottom: 0;
  }

  @if($direction == 'right') {
    transform: rotate(45deg);
    border-bottom: 0;
    border-left: 0;
  }

  @if($direction == 'down') {
    transform: rotate(45deg);
    border-top: 0;
    border-left: 0;
  }

  @if($direction == 'left') {
    transform: rotate(45deg);
    border-top: 0;
    border-right: 0;
  }
}

// https://davidwalsh.name/css-triangles
@mixin triangle($size, $color, $direction) {
  width: 0;
  height: 0;
  font-size: 0;
	line-height: 0;

  @if($direction == 'up') {
    border-top: 0;
    border-left: $size solid transparent;  /* left arrow slant */
    border-right: $size solid transparent; /* right arrow slant */
    border-bottom: $size solid $color; /* bottom, add background color here */
  }

  @if($direction == 'right') {
    border-right: 0;
    border-bottom: $size solid transparent;  /* left arrow slant */
    border-top: $size solid transparent; /* right arrow slant */
    border-left: $size solid $color; /* bottom, add background color here */
  }

  @if($direction == 'down') {
    border-left: $size solid transparent;
    border-right: $size solid transparent;
    border-top: $size solid $color;
  }

  @if($direction == 'left') {
    border-left: 0;
    border-bottom: $size solid transparent;  /* left arrow slant */
	  border-top: $size solid transparent; /* right arrow slant */
	  border-right: $size solid $color; /* bottom, add background color here */
  }
}

@mixin translate_content() {
  padding-top: 50px;

  @media #{$mq-laptop} {
    padding-top: 50px;
  }
}

@mixin header_veil($size: 50px) {
  &:before {
    display: block;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: $size;
    background-color: $color-1;
    content: '';
    z-index: 1;
  }
}

@mixin flexbox {
  display: -webkit-box;
  display: -moz-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

@mixin inline-flex {
  display: -webkit-inline-box;
  display: -moz-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
}

@mixin flex-direction($value: row) {
  @if $value == row-reverse {
      -webkit-box-direction: reverse;
      -webkit-box-orient: horizontal;
      -moz-box-direction: reverse;
      -moz-box-orient: horizontal;
  }
  @else if $value == column {
      -webkit-box-direction: normal;
      -webkit-box-orient: vertical;
      -moz-box-direction: normal;
      -moz-box-orient: vertical;
  }
  @else if $value == column-reverse {
      -webkit-box-direction: reverse;
      -webkit-box-orient: vertical;
      -moz-box-direction: reverse;
      -moz-box-orient: vertical;
  }
  @else {
      -webkit-box-direction: normal;
      -webkit-box-orient: horizontal;
      -moz-box-direction: normal;
      -moz-box-orient: horizontal;
  }

  -webkit-flex-direction: $value;
  -ms-flex-direction: $value;
  flex-direction: $value;
}

@mixin justify-content($value: flex-start) {
  @if $value == flex-start {
      -webkit-box-pack: start;
      -moz-box-pack: start;
      -ms-flex-pack: start;
  }
  @else if $value == flex-end {
      -webkit-box-pack: end;
      -moz-box-pack: end;
      -ms-flex-pack: end;
  }
  @else if $value == space-between {
      -webkit-box-pack: justify;
      -moz-box-pack: justify;
      -ms-flex-pack: justify;
  }
  @else if $value == space-around {
      -ms-flex-pack: distribute;
  }
  @else {
      -webkit-box-pack: $value;
      -moz-box-pack: $value;
      -ms-flex-pack: $value;
  }

  -webkit-justify-content: $value;
  justify-content: $value;
}

@mixin align-items($value: stretch) {
  @if $value == flex-start {
      -webkit-box-align: start;
      -moz-box-align: start;
      -ms-flex-align: start;
  }
  @else if $value == flex-end {
      -webkit-box-align: end;
      -moz-box-align: end;
      -ms-flex-align: end;
  }
  @else {
      -webkit-box-align: $value;
      -moz-box-align: $value;
      -ms-flex-align: $value;
  }

  -webkit-align-items: $value;
  align-items: $value;
}

@mixin align-self($value: auto) {
  // No Webkit Box Fallback.
  -webkit-align-self: $value;

  @if $value == flex-start {
      -ms-flex-item-align: start;
  }
  @else if $value == flex-end {
      -ms-flex-item-align: end;
  }
  @else {
      -ms-flex-item-align: $value;
  }

  align-self: $value;
}

@mixin align-content($value: stretch) {
  // No Webkit Box Fallback.
  -webkit-align-content: $value;

  @if $value == flex-start {
      -ms-flex-line-pack: start;
  }
  @else if $value == flex-end {
      -ms-flex-line-pack: end;
  }
  @else {
      -ms-flex-line-pack: $value;
  }

  align-content: $value;
}

@mixin flex-basis($value: auto) {
  width: $value;
  -webkit-flex-basis: $value;
  flex-basis: $value;
}

@mixin flex-grow($int: 1) {
  -webkit-box-flex: $int;
  -moz-box-flex: $int;
  -webkit-flex-grow: $int;
  -ms-flex: $int;
  flex-grow: $int;
}

@mixin flex-shrink($int: 0) {
  -webkit-flex-shrink: $int;
  -moz-flex-shrink: $int;
  -ms-flex: $int;
  flex-shrink: $int;
}

@mixin flex-flow($values: (row nowrap)) {
  // No Webkit/FF Box fallback.
  -webkit-flex-flow: $values;
  -ms-flex-flow: $values;
  flex-flow: $values;
}

@mixin flex-wrap($value: nowrap) {
  // No Webkit/FF Box fallback.
  -webkit-flex-wrap: $value;

  @if $value == nowrap {
      -ms-flex-wrap: none;
  }
  @else {
      -ms-flex-wrap: $value;
  }

  flex-wrap: $value;
}

@mixin order($int: 0) {
  -webkit-box-ordinal-group: $int + 1;
  -moz-box-ordinal-group: $int + 1;
  -webkit-order: $int;
  -ms-flex-order: $int;
  order: $int;
}

@mixin flex($fg: 1, $fs: 0, $fb: auto, $important: false) {
  // Set a variable to be used by box-flex properties
  $fg-boxflex: $fg;

  // Box-Flex only supports a flex-grow value so lets grab the
  // first item in the list and just return that.
  @if type-of($fg) == 'list' {
      $fg-boxflex: nth($fg, 1);
  }

  @if $important {
      -webkit-box: $fg-boxflex !important;
      -moz-box: $fg-boxflex !important;
      -webkit-flex: $fg $fs $fb !important;
      -ms-flex: $fg $fs $fb !important;
      flex: $fg $fs $fb !important;
  }
  @else {
      -webkit-box: $fg-boxflex;
      -moz-box: $fg-boxflex;
      -webkit-flex: $fg $fs $fb;
      -ms-flex: $fg $fs $fb;
      flex: $fg $fs $fb;
  }
}
